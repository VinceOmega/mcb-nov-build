<?php defined('SYSPATH') OR die('No direct access allowed.');
/**
 * Default Kohana controller. This controller should NOT be used in production.
 * It is for demonstration purposes only!
 *
 * @package    Core
 * @author     Kohana Team
 * @copyright  (c) 2007-2008 Kohana Team
 * @license    http://kohanaphp.com/license.html
 */
class Occasions_Controller extends My_Template_Controller {

	// Disable this controller when Kohana is set to production mode.
	// See http://docs.kohanaphp.com/installation/deployment for more details.
	const ALLOW_PRODUCTION = FALSE;

	// Set the name of the template to use
	public $template = 'kohana/template';

	public $description = '';
	public $title = '';
	public $keywords = '';

	public function index()
	{
		// In Kohana, all views are loaded and treated as objects.
		$this->template->content = new View('occasions');
		
		// getOccasions and getOccasion($id) is a method defined in Occasion_Model
		$occasions = new Occasion_Model;
		$this->template->content->occasionresults = $occasions->getOccasions();  
		$occasion =  $occasions->getOccasionByName($occasions->find(1)->name);;
		$this->template->content->occasion = $occasion;  

		$occasion->meta_description = 'blah';
		$occasion->meta_keywords = 'blah';
		$occasion->meta_title = 'blah';

		$this->template->metaDescription = $occasion->meta_description;
		$this->template->metaKeywords = $occasion->meta_keywords;
		$this->template->metaTitle = $occasion->meta_title;

		// You can assign anything variable to a view by using standard OOP
		// methods. In my welcome view, the $title variable will be assigned
		// the value I give it here.
		$this->template->title = $occasion->meta_title;
		
		// getProducts is a method defined in Product_Model
		$products = new Product_Model;
		$this->template->content->productresults = $products->getProductsForSite(TRUE);  
	}
	
	public function show() {
		// In Kohana, all views are loaded and treated as objects.
		$this->template->content = new View('occasions');
		
		$occasionarray = Router::$arguments;
		$occasionname = $occasionarray[0];
		
		// getOccasions and getOccasion($id) is a method defined in Occasion_Model
		$occasions = new Occasion_Model;


		$this->template->content->occasionresults = $occasions->getOccasions();  
		$occasion =  $occasions->getOccasionByName($occasionname);
		$this->template->content->occasion = $occasion;  

		$this->template->metaDescription = $occasion->meta_description;
		$this->template->metaKeywords = $occasion->meta_keywords;
		$this->template->metaTitle = $occasion->meta_title;

		// You can assign anything variable to a view by using standard OOP
		// methods. In my welcome view, the $title variable will be assigned
		// the value I give it here.
		$this->template->title = $occasion->meta_title;
		
		
		// getProducts is a method defined in Product_Model
		$products = new Product_Model;
		$this->template->content->productresults = $products->getProductsForSite(TRUE);  
	}
	

	public function __call($method, $arguments)
	{
		echo "<pre>";
		var_dump($occasions);
		echo "<pre>";
		// Disable auto-rendering
		$this->auto_render = FALSE;

		// By defining a __call method, all pages routed to this controller
		// that result in 404 errors will be handled by this method, instead of
		// being displayed as "Page Not Found" errors.
		echo 'This text is generated by __call. If you expected the index page, you need to use: welcome/index/'.substr(Router::$current_uri, 8);
	}

} // End Welcome Controller